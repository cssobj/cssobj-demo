{
  "_args": [
    [
      "cssobj/cssobj",
      "/home/1111hui/public_html/github/css/cssobj-demo"
    ]
  ],
  "_from": "cssobj/cssobj",
  "_id": "cssobj@0.2.12",
  "_inCache": true,
  "_installable": true,
  "_location": "/cssobj",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/cssobj/cssobj/master/package.json",
      "gitUrl": "git://github.com/cssobj/cssobj.git",
      "httpsUrl": "git+https://github.com/cssobj/cssobj.git",
      "shortcut": "github:cssobj/cssobj",
      "ssh": "git@github.com:cssobj/cssobj.git",
      "sshUrl": "git+ssh://git@github.com/cssobj/cssobj.git",
      "type": "github"
    },
    "name": null,
    "raw": "cssobj/cssobj",
    "rawSpec": "cssobj/cssobj",
    "scope": null,
    "spec": "github:cssobj/cssobj",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/cssobj/cssobj.git#4b21e7d932c8e316d10eb70cc28176ac5c081e50",
  "_shasum": "6a42406d5f6e1694c6e0ce9005c3b9bd7882f3db",
  "_shrinkwrap": null,
  "_spec": "cssobj/cssobj",
  "_where": "/home/1111hui/public_html/github/css/cssobj-demo",
  "author": {
    "email": "jamesyang999@gmail.com",
    "name": "James Yang"
  },
  "bugs": {
    "url": "https://github.com/cssobj/cssobj/issues"
  },
  "dependencies": {},
  "description": "CSS in JS solution, CSSOM from js, getting and setting CSS stylesheet rules, css modules and media query for old browsers. CSS in React/Angular/Vue/Ember/Mithril/jQuery",
  "devDependencies": {
    "chai": "^3.5.0",
    "diff": "^2.2.3",
    "gulp": "^3.9.1",
    "gulp-bump": "^2.2.0",
    "mocha": "^2.5.3",
    "rollup-watch": "^2.5.0",
    "walk": "^2.3.9"
  },
  "gitHead": "4b21e7d932c8e316d10eb70cc28176ac5c081e50",
  "homepage": "https://github.com/cssobj/cssobj#readme",
  "jsnext:main": "dist/cssobj.es.js",
  "keywords": [
    "css in js",
    "css modules",
    "cssom",
    "diff css",
    "media query"
  ],
  "license": "MIT",
  "main": "dist/cssobj.cjs.js",
  "name": "cssobj",
  "optionalDependencies": {},
  "readme": "# CSSOBJ\n\n[![Build Status](https://travis-ci.org/cssobj/cssobj.svg?branch=master)](https://travis-ci.org/cssobj/cssobj) [Github Repo](https://github.com/cssobj/cssobj)\n\nCSS in JS solution, [CSSOM](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model) from js, getting and setting CSS stylesheet rules, css modules inside JS components, media query for old browsers. Good for MVC frameworks.\n\nLight weight: **only 1 file, 3K gzipped, no dependencies**\n\nWell [tested](https://github.com/cssobj/cssobj#test), easy to use in your project, see [Wiki](https://github.com/cssobj/cssobj/wiki/Work-with-popular-JS-Lib)\n\n[Live demo](https://cssobj.github.io/cssobj-demo/)\n\n[![CSSOBJ Screenshot](demo-box.gif)](https://cssobj.github.io/cssobj-demo/#demo1)\n\n## Why?\n\nFor a long time, the way for javascript to dynamicly change css is via **DOM.style**, like below:\n\n``` javascript\ndocument.getElementById('domID').style.color = 'red'\ndocument.getElementById('domID').style.fontSize = '14px'\n```\n\nor jQuery (or similar lib):\n\n``` javascript\n$('div').css({color:'red', fontSize:'14px'})\n```\n\nBut the first way is poor, the second way need jQuery lib, interactive with DOM, and have performance issues.\n\n**But ALL of them is not updating css rules**.\n\n[CSSOM](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model) is the base stone of browser, and it have good javascript API, why not using it?\n\n**cssobj** is the modern CSSOM **generate** and **diff** engine, see below:\n\n```javascript\n/* script in your <head> */\nvar obj = {div: {color:'red', fontSize:'12px'}}\nvar ret = cssobj(obj)\n```\n\nThen all `div` will have `color: red;`, currently and future!\n\nWant to dynamicly update?\n\n```javascript\n/* script in your <head> */\nobj.div.color = 'blue'\nret.update()\n```\n\nThen all `div` will update css `color: blue;`. No jQuery, no wait for **DOM**, no `window.onload`!\n\nThe cool thing is:\n\n - **You never need to wait for DOM any more**\n\n - **cssobj will only update changed value, good for performance!**\n\n\n## Install:\n\n- Download this repo, and check the dist folder.\n\n- This project currently not published to `npmjs`, please using below to install from github directly:\n\n``` javascript\nnpm install cssobj/cssobj\n```\n\n## Usage:\n\n**cssobj** is universal lib for manipulate **CSSOM**, below is just some use case:\n\n### Case 1: you want local class names\n\nThink below normal stylesheet:\n\n``` html\n<style>\n  body { color: red; }\n  .item  { font-size: 12px; }\n  .item span { color: blue; }\n</style>\n```\n\nYou will have the **pain** by sharing to others with class name conflict, so\n\n#### Using *cssobj* instead:\n\nInclude **dist/cssobj.min.js** into `<head>`, add code below:\n\n``` html\n<script src=\"dist/cssobj.min.js\"></script>\n<script>\nvar obj = {\n  body: {\n    color:'red'\n  },\n  '.item': {\n    fontSize: '12px',\n    span: { color: 'blue' }\n  }\n}\nvar result = cssobj(obj, {local:true})\n</script>\n```\n\nThis will generate [CSSOM](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model) in your `<head>`, with below css:\n\n``` css\nbody {\n  color: red;\n}\n._1jkhrb92_item {\n  font-size: 12px;\n}\n._1jkhrb92_item span {\n  color: blue;\n}\n```\n\nClass names will add a random prefix, you can get the altered class name using below:\n\n``` javascript\nresult.mapSel('.item')   // === ._1jkhrb92_item (with dot)\nresult.mapClass('.item')   // === _1jkhrb92_item (without dot)\n```\n\nYou can also specify your own `prefix`.\n\n``` javascript\nvar result = cssobj(obj, {local: {prefix:'_yourown_'} })\n// .item -> ._yourown_item\n```\n\n### Case 2: you want dynamicly update you css rule\n\nChange stylesheet using js?\n\n``` javascript\ndocument.getElementById('id').style.fontSize = '12px'\n```\n\nNo, it's not updating css rule. Change **DOM** is the **old way**.\n\n#### Using *cssobj* to update CSSOM:\n\n``` javascript\nvar obj = {\n  div: {fontSize:'12px'}\n}\nvar css = cssobj(obj)\n```\n\nIf you want to update the rule later:\n\n``` javascript\n... ...\nobj.div = {color:'red', fontSize:'14px'}\ncss.update()\n```\n\nThen all your `div` (current and future added!) will have the new rule.\n\nThe performance is optimized, only updating changed prop, keep others **untouched**!\n\n\n### Case 3: you want @media rule work in old Browsers\n\nJust try this [demo](https://cssobj.github.io/cssobj-demo/play/), in IE 8, or IE 7, or IE 5!\n\n## How it worked?\n\n1. **cssobj** first parse js object into **Virtual CSS** middle format.\n\n2. The internal [plugin-cssom](https://github.com/cssobj/cssobj-plugin-post-cssom) will create stylesheet dom, and apply rules from middle format.\n\n3. When the js object changed, **cssobj** will diff CSSOM rules (**add/delete/change**) accordingly. (see [demo](https://cssobj.github.io/cssobj-demo/#demo1))\n\n## Benefit\n\nWhat's the benefit? See below:\n\n### 1. Live update\n\n```js\nobj.div.fontSize = '16px'\nresult.update()\n```\n\nThen the actual style sheet will update the `div` selector rule, set `font-size` to `16px`.\n\n### 2. Dynamic caculation\n\n```js\nobj.div.width = function(){ return window.innerWidth / 3 + 'px' }\nobj.div.height = function(){ return this.width }\nresult.update()\n```\n\nThen all the `div` will have same width & height, as 1/3 of window width, magicly!\n\n### 3. Hot replacement\n\n```js\nobj.div.span = {color:'green', marginLeft: '20px'}\nresult.update()\n```\n\nThen the old `span` selector will be replaced by the new rule.\n\n### 4. @media support in old browsers\n\n```js\ncssobj({\n  div:{ color:'red' },\n  '@media (max-width: 768px)':{\n    div:{ color:'green' },\n    '@media (min-width: 480px)':{\n      div:{ color:'blue' }\n    }\n  }\n})\n```\n\nThen `div` will have color as **red**, **green** and **blue** accordingly, in **ALL BROWSERS** (IE5+, except IE6, contribution welcome!)\n\n[Demo](https://cssobj.github.io/cssobj-demo/play/) here for **@media (min-width), (max-width)** support for old browsers.\n\nBelow is the screencast with **@media** rule response support in **IE 5** (oh my!)\n\n[![CSSOBJ @media support](demo-media.gif)](https://cssobj.github.io/cssobj-demo/play/)\n\n### 5. Localized class names\n\n```js\nvar ret = cssobj({\n  body:{ color:'red' },\n  '.item':{ color:'blue' }\n}, {local : true} )\n```\n\nwill get CSSOM as below:\n\n```css\nbody { color: red; }\n._1c0b3bn4_nav { color: red; }\n```\n\nThere's no class name conflict. You can customize the `prefix` as you need, or turn off this feature.\n\n### 6. Small and smart\n\nOnly one js file with no dependencies, **3K** gzipped.\n\nEasy to plugin, and there're plenty of them.\n\nVirtual CSS middle format is JS object, thus can avoid the differences of CSS engines, dynamicly caculated.\n\n## API\n\n### `var result = cssobj(obj, options)`\n\nparse obj, generate virtual css, then render `<style>` tag into `<head>`\n\n#### *PARAMS*\n\n#### `obj`\n\nType: **{object|array}**\n\nNothing special, just plain js `Object`, or `Array` of `Object`, with below rules:\n\n* non-object(`string|number`) value act as css value.\n\n* if value is object, key will act as css selector.\n\n* if value is non-object, key will act as css property.\n\n#### `options`\n\nType: **{object}**\n\nname | type | default | description\n-----|-----|-----------|---------------\nlocal | Boolean or Object | false | `true` to localize class names, using `options.local.prefix` as prefix.\nlocal.prefix | String | random string | prefix for localized names, will using `random()` function in [cssobj-helper](https://github.com/cssobj/cssobj-helper) if not specified or as falsy.\nlocal.localNames | Object | { } | predefined `key - val` to control each class name when localized.\nplugins | Object | { } | supported key is `post`, `value`, `selector`, each must be function or array of functions.\n\n#### *RETURN*\n\ncssobj `RESULT` object\n\n\n### `RESULT` OBJECT\n\nThe return value of `cssobj()` and `result.update()`, it's a js object with below keys:\n\nname | type | description\n-----|-----|-----------\nobj | Object | The source js object for `cssobj()` function call.\nroot | Object | Virtual CSS object parsed from `obj`, mainly used for value functions and plugins.\nnodes | Array | Array of virtual css nodes, for the convinence of `filter` or `map` etc.\nmapSel | Function | Get localized class name from selector string. Function signature is `function({string} selector){ return {string} mappedSel }`.\nmapClass | Function | Get localized class name from class list string. Function signature is `function({string} classList){ return {string} mappedClassList }`.\nref | Object | Key/value pairs for named objects. Named objects is objects with `$id` string value in `obj`.\nupdate | Function | Update the `RESULT` object from `obj`, generate `diff`, update CSSOM and all relevent data. Function signature is `function updater ([{object} data]) { return {object} result }`\n-  | *updater param*:<br>data | [optional] Passed to `update()` function, and set to `RESULT` `data` value, for later use.\ndiff | Object | Set from `update()` function, with `added`, `removed`, `changed` nodes and props.\ndata | Object | Store for data parameter of `update()` function, can be referenced and changed in object functions and plugins.\noptions | Object | Store for `cssobj()` `options` parameter, can be referenced and changed in object functions and plugins.\ncssdom | Stylesheet<br>Element | Style sheet element generated by `cssobj()` function. Each call of `cssobj()` will generate a new cssdom. `update()` function only update cssdom with `diff` result.\n\n## Plugins\n\n- [cssobj-plugin-selector-localize](https://github.com/cssobj/cssobj-plugin-selector-localize) Localize class names in selector\n\n- [cssobj-plugin-value-default-unit](https://github.com/cssobj/cssobj-plugin-value-default-unit) Add default unit to numeric values, e.g. width / height\n\n- [cssobj-plugin-post-gencss](https://github.com/cssobj/cssobj-plugin-post-gencss) Generate css text from virtual css\n\n- [cssobj-plugin-post-cssdom](https://github.com/cssobj/cssobj-plugin-post-cssom) Add style dom to head and update rules from virtual css diff result\n\n- [cssobj-plugin-post-stylize](https://github.com/cssobj/cssobj-plugin-post-stylize) Add style dom to head then update css from gencss plugin, small in size\n\n- [cssobj-plugin-post-csstext](https://github.com/cssobj/cssobj-plugin-post-csstext) Display cssText from CSSOM\n\n*More plugins welcome!*\n\n## Demos\n\n[cssobj-demo](https://github.com/cssobj/cssobj-demo)\n\n## Tools\n\n[cssobj-converter](https://github.com/cssobj/cssobj-converter)\n\n## Helpers\n\n[cssobj-mithril](https://github.com/cssobj/cssobj-mithril) Help cssobj to work with [mithril](https://github.com/lhorie/mithril.js)\n\n*More helper welcome!*\n\n## Test\n\nUsing [phantom](http://phantomjs.org/) 2.0 to test with CSSOM. Please see **test/** folder.\n\n## Remark\n\ncssobj is wrapper for [cssobj-core](https://github.com/cssobj/cssobj-core), [plugin-localize](https://github.com/cssobj/cssobj-plugin-selector-localize) and [plugin-cssom](https://github.com/cssobj/cssobj-plugin-post-cssom).\n\n## Contribute\n\nYes! We need you! Think below way:\n\n - Please use cssobj in your project.\n\n - Please tell your friend about cssobj.\n\n - Please post issues for your idea and for bug.\n\n - Please read source, improve it!\n\n## License\n\nMIT © James Yang\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cssobj/cssobj.git"
  },
  "scripts": {
    "make": "rollup -c && uglifyjs dist/cssobj.iife.js -cm -o dist/cssobj.min.js && gulp bump",
    "report": "cd dist && gzip < cssobj.min.js > cssobj.min.gz && ls -lh && rm -f *.gz",
    "test": "cd test && mocha"
  },
  "version": "0.2.12"
}
